{
  component: 'api',
  service: 'discord-bot',
  url: '/api/bot-service/products/1413584793542856856',
  method: 'get',
  status: 404,
  message: 'API request failed: Request failed with status code 404',
  level: 'error',
  timestamp: '2025-09-07 05:24:42'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: false,
  responseTime: '5027ms',
  error: 'Request failed with status code 404',
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 05:24:42'
}
{
  service: 'discord-bot',
  name: 'ConnectTimeoutError',
  code: 'UND_ERR_CONNECT_TIMEOUT',
  level: 'error',
  message: 'Failed to login to Discord: Connect Timeout Error (attempted address: discord.com:443, timeout: 10000ms)',
  stack: 'ConnectTimeoutError: Connect Timeout Error (attempted address: discord.com:443, timeout: 10000ms)\n' +
    '    at onConnectTimeout (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\undici\\lib\\core\\connect.js:237:24)\n' +
    '    at Immediate._onImmediate (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\undici\\lib\\core\\connect.js:188:35)\n' +
    '    at processImmediate (node:internal/timers:485:21)',
  timestamp: '2025-09-07 05:45:49'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: 401,
  message: 'API request failed: Request failed with status code 401',
  level: 'error',
  timestamp: '2025-09-07 10:14:27'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: 401,
  message: 'API request failed: Request failed with status code 401',
  level: 'error',
  timestamp: '2025-09-07 10:14:36'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '16ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:518:28)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:194:72)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [Function: handleRequestSocket]
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    }
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 5000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 183,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 5168,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 173,
                  [Symbol(triggerId)]: 0,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              }
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 5000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 183,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 5168,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 173,
            [Symbol(triggerId)]: 0,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 10:17:58'
}
{
  service: 'discord-bot',
  level: 'error',
  message: 'Failed to authenticate with backend API: Authentication failed: ',
  stack: 'Error: Authentication failed: \n' +
    '    at BotApiService.authenticate (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\services\\botApiService.ts:227:19)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async ECBot.onReady (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:151:13)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:57:13)',
  timestamp: '2025-09-07 10:17:58'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: 401,
  message: 'API request failed: Request failed with status code 401',
  level: 'error',
  timestamp: '2025-09-07 10:18:54'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1160:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:274:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 10:31:57'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414075851816964223/aW50ZXJhY3Rpb246MTQxNDA3NTg1MTgxNjk2NDIyMzpuNUU5aUlxOVFXRnNHSUxua3Y2MTJvOXYxUE1RUm9sTTlpODh1MURCUjlmTjQwUFFVejRSdXhRTndFWVk4cUhxSm4wdVZCVE9TTlNzYk9IV1kxS0pybU1KcTdVMVZwNDkxZkNBNnRUek41eEh6NmY2ZUprUzhYOVA5SzZpT1NqMA/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 10:31:57'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1160:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:274:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 10:44:10'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414078918516015204/aW50ZXJhY3Rpb246MTQxNDA3ODkxODUxNjAxNTIwNDp6V1d5U2p0bDZxUkpIRlRaNFEzdUdnNW9rWXBWc3Q3bFhVdnhYQmN2YlJBSWR1a0ZSUlZjTE5nNXRRcHg4TUhQTlNvbzFIbU5Ia0dvWjdwaVNOTUYwTHNvVDNjbVhxaVJEa2lad2tyRUQwRGRoeHVqQzd2R1QwZWJySGxHMDJ3dA/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 10:44:10'
}
{
  component: 'events',
  service: 'discord-bot',
  code: 'InteractionNotReplied',
  level: 'error',
  message: 'renderShopBrowseFromHome error The reply to this interaction has not been sent or deferred.',
  stack: 'Error [InteractionNotReplied]: The reply to this interaction has not been sent or deferred.\n' +
    '    at ButtonInteraction.followUp (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:282:48)\n' +
    '    at InteractionHandler.renderShopBrowseFromHome (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:598:48)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async InteractionHandler.handleButton (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:191:13)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:109:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 10:44:25'
}
{
  service: 'discord-bot',
  level: 'error',
  message: 'Failed to authenticate with backend API: this.apiService.authenticate is not a function',
  stack: 'TypeError: this.apiService.authenticate is not a function\n' +
    '    at ECBot.onReady (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:151:35)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:57:13)',
  timestamp: '2025-09-07 10:58:52'
}
{
  component: 'events',
  service: 'discord-bot',
  code: 'InteractionNotReplied',
  level: 'error',
  message: 'renderShopBrowseFromHome error The reply to this interaction has not been sent or deferred.',
  stack: 'Error [InteractionNotReplied]: The reply to this interaction has not been sent or deferred.\n' +
    '    at ButtonInteraction.followUp (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:282:48)\n' +
    '    at InteractionHandler.renderShopBrowseFromHome (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:598:48)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async InteractionHandler.handleButton (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:191:13)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:109:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 10:59:17'
}
{
  service: 'discord-bot',
  level: 'error',
  message: 'Failed to authenticate with backend API: this.apiService.authenticate is not a function',
  stack: 'TypeError: this.apiService.authenticate is not a function\n' +
    '    at ECBot.onReady (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:151:35)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:57:13)',
  timestamp: '2025-09-07 11:00:01'
}
{
  service: 'discord-bot',
  level: 'error',
  message: 'Failed to authenticate with backend API: this.apiService.authenticate is not a function',
  stack: 'TypeError: this.apiService.authenticate is not a function\n' +
    '    at ECBot.onReady (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:151:35)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:57:13)',
  timestamp: '2025-09-07 11:00:34'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/bot-service/templates/1413584793542856856',
  method: 'get',
  status: 404,
  message: 'API request failed: Request failed with status code 404',
  level: 'error',
  timestamp: '2025-09-07 12:10:05'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: false,
  responseTime: '5027ms',
  error: 'Request failed with status code 404',
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 12:10:05'
}
{
  component: 'commands',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: 'Loading…',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414104178292166829/aW50ZXJhY3Rpb246MTQxNDEwNDE3ODI5MjE2NjgyOTo0QXAwZVBSVnNBZlgyZ09UTVpIRzRqdmp3WWg3b1hyVE5Yd2E2MDNJS2RGeVh2Szh2Q0ZneVRwQXhUS1A1eHdsc2JMa3pZelBuQTU2WHVneFRkTHV0NENQbXJ5eTN3TkduZUhjZ3VuekVoNkQ5SmVYcUtRMzFiWTVDQjQ0bTVXQQ/callback?with_response=false',
  level: 'error',
  message: 'Shop command error: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async ChatInputCommandInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async Object.execute (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\commands\\shop.ts:50:21)\n' +
    '    at async CommandHandler.handleCommand (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\commandHandler.ts:102:13)\n' +
    '    at async InteractionHandler.handleSlashCommand (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:167:9)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:107:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 12:24:33'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1117:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:274:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 19:03:13'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414204521399451688/aW50ZXJhY3Rpb246MTQxNDIwNDUyMTM5OTQ1MTY4ODp2NHZJQVg3Z1lKVTJUd2dWM1ViQU1zck51VlBMMXd3REhYT3M4NW1NT1JWTXRUcmFsazFlZkNkaFNSVnJqQXRCNUtrcGc2WjVFd0NjYzhnVHRYRHZ0aFZPamRFbnE3OGJHR1FpTXZMQmF0NTljdUZvREZIbkU1R1lqT29rWDNoRQ/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 19:03:13'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1117:9)\n' +
    '    at async InteractionHandler.handleNetworkSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1133:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:277:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 19:03:56'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414204701855187005/aW50ZXJhY3Rpb246MTQxNDIwNDcwMTg1NTE4NzAwNTpJVUdkeEM0Z3pBNFpReXB2YVgwTlV2eU1UZTNUM0JIT2hjZVh3NDdIdW4xOWZySUM1ZkhPY3V3WkJheHdnYjdPMThEYk5oVVZZeEZDNk8xMEZPY1FiRHNWVmVyZmVVR1htSGtTZU1mekZpTWZTdVRKWTZva29VYjhVQVNNWHZKWQ/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 19:03:56'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1117:9)\n' +
    '    at async InteractionHandler.handleNetworkSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1133:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:277:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 19:04:05'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414204727154966608/aW50ZXJhY3Rpb246MTQxNDIwNDcyNzE1NDk2NjYwODp3S2xHeEJSa3Z4N0VNUXlNT1h6UEZFMTBVTEJ4NTVOdjlBRXdLQndpd1pma1pBN2lDUGRReFlzQVo1RWxUaGIwTVJSUnhnVDNia0hIczB6VEhsZTlSUTVSekQyQjc3ekFzOUNRbXlCSWpoa3BLb0dhWHdxeTMzemNqOUdRRHV2cg/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 19:04:06'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1117:9)\n' +
    '    at async InteractionHandler.handleNetworkSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1133:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:277:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 19:04:22'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414204813956350024/aW50ZXJhY3Rpb246MTQxNDIwNDgxMzk1NjM1MDAyNDpxQWp1dExUeTVQVURaQmNZQ2JHQUw2enBxVldJUGx4b1ZRQkw4aVgxSTViWDFYakRUTXBjTGdlNnV0Qkw1eFZPcWxNelZFaWdEMEVYUjQzekpmQmZVaDk2d2ZZY0hySjNEYjNBcktXajhpclRuUVNYWmVsTWJ5bHJ5SHlKbVdyUg/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 19:04:23'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '15ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:518:28)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:117:66)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [Function: handleRequestSocket]
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    }
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 5000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 225,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 8054,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 215,
                  [Symbol(triggerId)]: 0,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              }
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 5000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 225,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 8054,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 215,
            [Symbol(triggerId)]: 0,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 20:48:36'
}
{
  service: 'discord-bot',
  level: 'error',
  message: 'Failed to authenticate with backend API: Authentication failed: ',
  stack: 'Error: Authentication failed: \n' +
    '    at BotApiService.authenticate (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\services\\botApiService.ts:149:13)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async ECBot.onReady (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:151:13)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:57:13)',
  timestamp: '2025-09-07 20:48:36'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/bot-service/categories/1413584793542856856',
  method: 'get',
  status: 500,
  message: 'API request failed: Request failed with status code 500',
  level: 'error',
  timestamp: '2025-09-07 20:56:41'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: false,
  responseTime: '7581ms',
  error: 'Request failed with status code 500',
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 20:56:41'
}
{
  component: 'commands',
  service: 'discord-bot',
  message: 'Shop browse error: Request failed with status code 500',
  name: 'AxiosError',
  code: 'ERR_BAD_RESPONSE',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'ECBot-Discord/1.0.0',
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    baseURL: 'http://localhost:3001',
    method: 'get',
    url: '/api/bot-service/categories/1413584793542856856',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *3> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    _header: 'GET /api/bot-service/categories/1413584793542856856 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: ECBot-Discord/1.0.0\r\n' +
      'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:3001\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        keepAlive: true,
        scheduling: 'lifo',
        timeout: 5000,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {
        'localhost:3001:': [
          <ref *1> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _events: {
              close: [Function: onClose],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              },
              prefinish: undefined,
              finish: undefined,
              drain: undefined,
              data: undefined,
              end: [Function: onReadableStreamEnd],
              readable: undefined,
              connect: undefined,
              free: [Function: onFree],
              timeout: [ [Function: onTimeout], [Function (anonymous)] ],
              agentRemove: [Function: onRemove]
            },
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: [],
              bufferIndex: 0,
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60303620
            },
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 17563908,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: null
            },
            allowHalfOpen: false,
            _maxListeners: undefined,
            _eventsCount: 6,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            timeout: 4000,
            parser: null,
            _httpMessage: null,
            autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 4000,
              _idlePrev: [Timeout],
              _idleNext: [TimersList],
              _idleStart: 18926,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 374,
              [Symbol(triggerId)]: 372,
              [Symbol(kAsyncContextFrame)]: undefined
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(shapeMode)]: true,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          },
          <ref *2> Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _events: {
              close: [Function: onClose],
              error: [Function: bound onceWrapper] {
                listener: [Function: freeSocketErrorListener]
              },
              prefinish: undefined,
              finish: undefined,
              drain: undefined,
              data: undefined,
              end: [Function: onReadableStreamEnd],
              readable: undefined,
              connect: undefined,
              free: [Function: onFree],
              timeout: [ [Function: onTimeout], [Function (anonymous)] ],
              agentRemove: [Function: onRemove]
            },
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: [],
              bufferIndex: 0,
              length: 0,
              pipes: [],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60303620
            },
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite],
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 17563908,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: null
            },
            allowHalfOpen: false,
            _maxListeners: undefined,
            _eventsCount: 6,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            timeout: 4000,
            parser: null,
            _httpMessage: null,
            autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: TCP {
              reading: true,
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 4000,
              _idlePrev: [TimersList],
              _idleNext: [Timeout],
              _idleStart: 19366,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 395,
              [Symbol(triggerId)]: 393,
              [Symbol(kAsyncContextFrame)]: undefined
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(shapeMode)]: true,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 2,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/api/bot-service/categories/1413584793542856856',
    _ended: true,
    res: IncomingMessage {
      _events: {
        close: undefined,
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        readable: undefined,
        finish: undefined,
        aborted: [Function: handlerStreamAborted]
      },
      _readableState: ReadableState {
        highWaterMark: 16384,
        buffer: [],
        bufferIndex: 0,
        length: 0,
        pipes: [],
        awaitDrainWriters: null,
        [Symbol(kState)]: 194779004
      },
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Security-Policy',
        "default-src 'self';style-src 'self' 'unsafe-inline';script-src 'self';img-src 'self' data: https:;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests",
        'Cross-Origin-Opener-Policy',
        'same-origin',
        'Cross-Origin-Resource-Policy',
        'same-origin',
        'Origin-Agent-Cluster',
        '?1',
        'Referrer-Policy',
        'no-referrer',
        'Strict-Transport-Security',
        'max-age=15552000; includeSubDomains',
        'X-Content-Type-Options',
        'nosniff',
        'X-DNS-Prefetch-Control',
        'off',
        'X-Download-Options',
        'noopen',
        'X-Frame-Options',
        'SAMEORIGIN',
        'X-Permitted-Cross-Domain-Policies',
        'none',
        'X-XSS-Protection',
        '0',
        'Access-Control-Allow-Origin',
        'http://localhost:3000',
        'Vary',
        'Origin, Accept-Encoding',
        'Access-Control-Allow-Credentials',
        'true',
        'RateLimit-Policy',
        '1000;w=900',
        'RateLimit-Limit',
        '1000',
        'RateLimit-Remaining',
        '997',
        'RateLimit-Reset',
        '895',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '135',
        'ETag',
        'W/"87-IUQXhRhZv2Qm8EA2WfeckrzTRYo"',
        'Date',
        'Sun, 07 Sep 2025 12:56:41 GMT',
        'Connection',
        'keep-alive',
        'Keep-Alive',
        'timeout=5'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'Internal Server Error',
      client: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [Function: onClose],
          error: [Function: bound onceWrapper] {
            listener: [Function: freeSocketErrorListener]
          },
          prefinish: undefined,
          finish: undefined,
          drain: undefined,
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: undefined,
          free: [Function: onFree],
          timeout: [ [Function: onTimeout], [Function (anonymous)] ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 60303620
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 0,
          [Symbol(kState)]: 17563908,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: null
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 6,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 4000,
        parser: null,
        _httpMessage: null,
        autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
        [Symbol(async_id_symbol)]: -1,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 4000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 19366,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 395,
          [Symbol(triggerId)]: 393,
          [Symbol(kAsyncContextFrame)]: undefined
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 1,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *3],
      _eventsCount: 4,
      responseUrl: 'http://localhost:3001/api/bot-service/categories/1413584793542856856',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-security-policy': "default-src 'self';style-src 'self' 'unsafe-inline';script-src 'self';img-src 'self' data: https:;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests",
        'cross-origin-opener-policy': 'same-origin',
        'cross-origin-resource-policy': 'same-origin',
        'origin-agent-cluster': '?1',
        'referrer-policy': 'no-referrer',
        'strict-transport-security': 'max-age=15552000; includeSubDomains',
        'x-content-type-options': 'nosniff',
        'x-dns-prefetch-control': 'off',
        'x-download-options': 'noopen',
        'x-frame-options': 'SAMEORIGIN',
        'x-permitted-cross-domain-policies': 'none',
        'x-xss-protection': '0',
        'access-control-allow-origin': 'http://localhost:3000',
        vary: 'Origin, Accept-Encoding',
        'access-control-allow-credentials': 'true',
        'ratelimit-policy': '1000;w=900',
        'ratelimit-limit': '1000',
        'ratelimit-remaining': '997',
        'ratelimit-reset': '895',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '135',
        etag: 'W/"87-IUQXhRhZv2Qm8EA2WfeckrzTRYo"',
        date: 'Sun, 07 Sep 2025 12:56:41 GMT',
        connection: 'keep-alive',
        'keep-alive': 'timeout=5'
      },
      [Symbol(kHeadersCount)]: 50,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/categories/1413584793542856856',
        method: 'GET',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'ECBot-Discord/1.0.0',
          Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/categories/1413584793542856856'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *3],
      _currentUrl: 'http://localhost:3001/api/bot-service/categories/1413584793542856856',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: <ref *2> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: {
        close: [Function: onClose],
        error: [Function: bound onceWrapper] {
          listener: [Function: freeSocketErrorListener]
        },
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        data: undefined,
        end: [Function: onReadableStreamEnd],
        readable: undefined,
        connect: undefined,
        free: [Function: onFree],
        timeout: [ [Function: onTimeout], [Function (anonymous)] ],
        agentRemove: [Function: onRemove]
      },
      _readableState: ReadableState {
        highWaterMark: 16384,
        buffer: [],
        bufferIndex: 0,
        length: 0,
        pipes: [],
        awaitDrainWriters: null,
        [Symbol(kState)]: 60303620
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17563908,
        [Symbol(kBufferedValue)]: null,
        [Symbol(kWriteCbValue)]: null
      },
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 4000,
      parser: null,
      _httpMessage: null,
      autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *2]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 4000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 19366,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 395,
        [Symbol(triggerId)]: 393,
        [Symbol(kAsyncContextFrame)]: undefined
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      'user-agent': [ 'User-Agent', 'ECBot-Discord/1.0.0' ],
      authorization: [
        'Authorization',
        'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k'
      ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'localhost:3001' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 500,
    statusText: 'Internal Server Error',
    headers: Object [AxiosHeaders] {
      'content-security-policy': "default-src 'self';style-src 'self' 'unsafe-inline';script-src 'self';img-src 'self' data: https:;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests",
      'cross-origin-opener-policy': 'same-origin',
      'cross-origin-resource-policy': 'same-origin',
      'origin-agent-cluster': '?1',
      'referrer-policy': 'no-referrer',
      'strict-transport-security': 'max-age=15552000; includeSubDomains',
      'x-content-type-options': 'nosniff',
      'x-dns-prefetch-control': 'off',
      'x-download-options': 'noopen',
      'x-frame-options': 'SAMEORIGIN',
      'x-permitted-cross-domain-policies': 'none',
      'x-xss-protection': '0',
      'access-control-allow-origin': 'http://localhost:3000',
      vary: 'Origin, Accept-Encoding',
      'access-control-allow-credentials': 'true',
      'ratelimit-policy': '1000;w=900',
      'ratelimit-limit': '1000',
      'ratelimit-remaining': '997',
      'ratelimit-reset': '895',
      'content-type': 'application/json; charset=utf-8',
      'content-length': '135',
      etag: 'W/"87-IUQXhRhZv2Qm8EA2WfeckrzTRYo"',
      date: 'Sun, 07 Sep 2025 12:56:41 GMT',
      connection: 'keep-alive',
      'keep-alive': 'timeout=5'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 30000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'ECBot-Discord/1.0.0',
        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      baseURL: 'http://localhost:3001',
      method: 'get',
      url: '/api/bot-service/categories/1413584793542856856',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *3> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      _header: 'GET /api/bot-service/categories/1413584793542856856 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: ECBot-Discord/1.0.0\r\n' +
        'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:3001\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {
          'localhost:3001:': [
            <ref *1> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [Function: onClose],
                error: [Function: bound onceWrapper] {
                  listener: [Function: freeSocketErrorListener]
                },
                prefinish: undefined,
                finish: undefined,
                drain: undefined,
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: undefined,
                free: [Function: onFree],
                timeout: [ [Function: onTimeout], [Function (anonymous)] ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 60303620
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 0,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 0,
                bufferedIndex: 0,
                pendingcb: 0,
                [Symbol(kState)]: 17563908,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: null
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 6,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              timeout: 4000,
              parser: null,
              _httpMessage: null,
              autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
              [Symbol(async_id_symbol)]: -1,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 4000,
                _idlePrev: [Timeout],
                _idleNext: [TimersList],
                _idleStart: 18926,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 374,
                [Symbol(triggerId)]: 372,
                [Symbol(kAsyncContextFrame)]: undefined
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 1,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            },
            <ref *2> Socket {
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [Function: onClose],
                error: [Function: bound onceWrapper] {
                  listener: [Function: freeSocketErrorListener]
                },
                prefinish: undefined,
                finish: undefined,
                drain: undefined,
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: undefined,
                free: [Function: onFree],
                timeout: [ [Function: onTimeout], [Function (anonymous)] ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                [Symbol(kState)]: 60303620
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 0,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 0,
                bufferedIndex: 0,
                pendingcb: 0,
                [Symbol(kState)]: 17563908,
                [Symbol(kBufferedValue)]: null,
                [Symbol(kWriteCbValue)]: null
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 6,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: null,
              _server: null,
              timeout: 4000,
              parser: null,
              _httpMessage: null,
              autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
              [Symbol(async_id_symbol)]: -1,
              [Symbol(kHandle)]: TCP {
                reading: true,
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: Timeout {
                _idleTimeout: 4000,
                _idlePrev: [TimersList],
                _idleNext: [Timeout],
                _idleStart: 19366,
                _onTimeout: [Function: bound ],
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: false,
                [Symbol(refed)]: false,
                [Symbol(kHasPrimitive)]: false,
                [Symbol(asyncId)]: 395,
                [Symbol(triggerId)]: 393,
                [Symbol(kAsyncContextFrame)]: undefined
              },
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(shapeMode)]: true,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: true,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 1,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0
            }
          ]
        },
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 2,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/bot-service/categories/1413584793542856856',
      _ended: true,
      res: IncomingMessage {
        _events: {
          close: undefined,
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          readable: undefined,
          finish: undefined,
          aborted: [Function: handlerStreamAborted]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 194779004
        },
        _maxListeners: undefined,
        socket: null,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Security-Policy',
          "default-src 'self';style-src 'self' 'unsafe-inline';script-src 'self';img-src 'self' data: https:;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests",
          'Cross-Origin-Opener-Policy',
          'same-origin',
          'Cross-Origin-Resource-Policy',
          'same-origin',
          'Origin-Agent-Cluster',
          '?1',
          'Referrer-Policy',
          'no-referrer',
          'Strict-Transport-Security',
          'max-age=15552000; includeSubDomains',
          'X-Content-Type-Options',
          'nosniff',
          'X-DNS-Prefetch-Control',
          'off',
          'X-Download-Options',
          'noopen',
          'X-Frame-Options',
          'SAMEORIGIN',
          'X-Permitted-Cross-Domain-Policies',
          'none',
          'X-XSS-Protection',
          '0',
          'Access-Control-Allow-Origin',
          'http://localhost:3000',
          'Vary',
          'Origin, Accept-Encoding',
          'Access-Control-Allow-Credentials',
          'true',
          'RateLimit-Policy',
          '1000;w=900',
          'RateLimit-Limit',
          '1000',
          'RateLimit-Remaining',
          '997',
          'RateLimit-Reset',
          '895',
          'Content-Type',
          'application/json; charset=utf-8',
          'Content-Length',
          '135',
          'ETag',
          'W/"87-IUQXhRhZv2Qm8EA2WfeckrzTRYo"',
          'Date',
          'Sun, 07 Sep 2025 12:56:41 GMT',
          'Connection',
          'keep-alive',
          'Keep-Alive',
          'timeout=5'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'Internal Server Error',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [Function: onClose],
            error: [Function: bound onceWrapper] {
              listener: [Function: freeSocketErrorListener]
            },
            prefinish: undefined,
            finish: undefined,
            drain: undefined,
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: undefined,
            free: [Function: onFree],
            timeout: [ [Function: onTimeout], [Function (anonymous)] ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 60303620
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 0,
            [Symbol(kState)]: 17563908,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: null
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 6,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: null,
          autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
          [Symbol(async_id_symbol)]: -1,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: 4000,
            _idlePrev: [TimersList],
            _idleNext: [Timeout],
            _idleStart: 19366,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 395,
            [Symbol(triggerId)]: 393,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 1,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *3],
        _eventsCount: 4,
        responseUrl: 'http://localhost:3001/api/bot-service/categories/1413584793542856856',
        redirects: [],
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-security-policy': "default-src 'self';style-src 'self' 'unsafe-inline';script-src 'self';img-src 'self' data: https:;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests",
          'cross-origin-opener-policy': 'same-origin',
          'cross-origin-resource-policy': 'same-origin',
          'origin-agent-cluster': '?1',
          'referrer-policy': 'no-referrer',
          'strict-transport-security': 'max-age=15552000; includeSubDomains',
          'x-content-type-options': 'nosniff',
          'x-dns-prefetch-control': 'off',
          'x-download-options': 'noopen',
          'x-frame-options': 'SAMEORIGIN',
          'x-permitted-cross-domain-policies': 'none',
          'x-xss-protection': '0',
          'access-control-allow-origin': 'http://localhost:3000',
          vary: 'Origin, Accept-Encoding',
          'access-control-allow-credentials': 'true',
          'ratelimit-policy': '1000;w=900',
          'ratelimit-limit': '1000',
          'ratelimit-remaining': '997',
          'ratelimit-reset': '895',
          'content-type': 'application/json; charset=utf-8',
          'content-length': '135',
          etag: 'W/"87-IUQXhRhZv2Qm8EA2WfeckrzTRYo"',
          date: 'Sun, 07 Sep 2025 12:56:41 GMT',
          connection: 'keep-alive',
          'keep-alive': 'timeout=5'
        },
        [Symbol(kHeadersCount)]: 50,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _events: {
          close: undefined,
          error: [Function: handleRequestError],
          prefinish: undefined,
          finish: undefined,
          drain: undefined,
          response: [Function: handleResponse],
          socket: [
            [Function: handleRequestSocket],
            [Function: destroyOnTimeout]
          ],
          timeout: undefined,
          abort: undefined
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 0,
          [Symbol(kState)]: 17580812,
          [Symbol(kBufferedValue)]: null
        },
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/api/bot-service/categories/1413584793542856856',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'ECBot-Discord/1.0.0',
            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '3001',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',        'BIND',        'CHECKOUT',
                'CONNECT',    'COPY',        'DELETE',
                'GET',        'HEAD',        'LINK',
                'LOCK',       'M-SEARCH',    'MERGE',
                'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
                'MOVE',       'NOTIFY',      'OPTIONS',
                'PATCH',      'POST',        'PROPFIND',
                'PROPPATCH',  'PURGE',       'PUT',
                'QUERY',      'REBIND',      'REPORT',
                'SEARCH',     'SOURCE',      'SUBSCRIBE',
                'TRACE',      'UNBIND',      'UNLINK',
                'UNLOCK',     'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: validateHeaderName] {
                withoutStackTrace: [Function (anonymous)]
              },
              validateHeaderValue: [Function: validateHeaderValue] {
                withoutStackTrace: [Function (anonymous)]
              },
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter],
              WebSocket: [Getter],
              CloseEvent: [Getter],
              MessageEvent: [Getter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(shapeMode)]: false,
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/bot-service/categories/1413584793542856856'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _eventsCount: 3,
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *3],
        _currentUrl: 'http://localhost:3001/api/bot-service/categories/1413584793542856856',
        _timeout: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false
      },
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [Function: onClose],
          error: [Function: bound onceWrapper] {
            listener: [Function: freeSocketErrorListener]
          },
          prefinish: undefined,
          finish: undefined,
          drain: undefined,
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: undefined,
          free: [Function: onFree],
          timeout: [ [Function: onTimeout], [Function (anonymous)] ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 60303620
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 0,
          [Symbol(kState)]: 17563908,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: null
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 6,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 4000,
        parser: null,
        _httpMessage: null,
        autoSelectFamilyAttemptedAddresses: [ '::1:3001' ],
        [Symbol(async_id_symbol)]: -1,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 4000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 19366,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 395,
          [Symbol(triggerId)]: 393,
          [Symbol(kAsyncContextFrame)]: undefined
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 1,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'ECBot-Discord/1.0.0' ],
        authorization: [
          'Authorization',
          'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXJ2aWNlIjoiZGlzY29yZF9ib3QiLCJzZXJ2aWNlSWQiOiIzYTZiMTcyYmM4YzcyYjdlOWIyMzViMDgyZGZiYWNhNiIsInBlcm1pc3Npb25zIjpbInJlYWRfdGVtcGxhdGVzIiwicmVhZF9wcm9kdWN0cyIsInJlYWRfY2F0ZWdvcmllcyIsImNyZWF0ZV9wYXltZW50cyIsIndlYmhvb2tfYWNjZXNzIiwicmVhZF9ib3RfY29uZmlnIiwidXBkYXRlX29yZGVyX3N0YXR1cyJdLCJ0eXBlIjoiYm90X3NlcnZpY2UiLCJpYXQiOjE3NTcyNDk3ODcsImV4cCI6MTc1NzI1MzM4NywiYXVkIjoiZWNib3QtYm90LXNlcnZpY2UiLCJpc3MiOiJlY2JvdC1hcGkifQ.p0SoSB9iOidTKamCFXUH_bebuDEkxIyiVKtqI0Em11k'
        ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:3001' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      success: false,
      error: {
        code: 'CATEGORY_FETCH_ERROR',
        message: 'Failed to fetch categories',
        timestamp: '2025-09-07T12:56:41.035Z'
      }
    }
  },
  status: 500,
  level: 'error',
  stack: 'AxiosError: Request failed with status code 500\n' +
    '    at settle (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\axios\\lib\\core\\settle.js:19:12)\n' +
    '    at IncomingMessage.handleStreamEnd (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\axios\\lib\\adapters\\http.js:599:11)\n' +
    '    at IncomingMessage.emit (node:events:530:35)\n' +
    '    at IncomingMessage.emit (node:domain:489:12)\n' +
    '    at endReadableNT (node:internal/streams/readable:1698:12)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n' +
    '    at Axios.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\axios\\lib\\core\\Axios.js:45:41)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BotApiService.getServerCategories (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\services\\botApiService.ts:318:57)\n' +
    '    at async Promise.all (index 1)\n' +
    '    at async handleBrowse (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\commands\\shop.ts:105:40)\n' +
    '    at async Object.execute (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\commands\\shop.ts:58:21)\n' +
    '    at async CommandHandler.handleCommand (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\commandHandler.ts:102:13)\n' +
    '    at async InteractionHandler.handleSlashCommand (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:167:9)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:107:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 20:56:41'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: 401,
  message: 'API request failed: Request failed with status code 401',
  level: 'error',
  timestamp: '2025-09-07 21:03:13'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'The reply to this interaction has not been sent or deferred.',
  stack: 'Error [InteractionNotReplied]: The reply to this interaction has not been sent or deferred.\n' +
    '    at StringSelectMenuInteraction.followUp (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:282:48)\n' +
    '    at InteractionHandler.handlePaymentSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1025:56)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:283:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  level: 'error',
  message: 'payment_select failed',
  timestamp: '2025-09-07 21:03:13'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: false,
  responseTime: '10753ms',
  error: 'Request failed with status code 404',
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 21:11:07'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: false,
  responseTime: '10753ms',
  error: 'Request failed with status code 404',
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 21:11:07'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 1200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 21:16:18'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 1200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 21:16:53'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 1200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 21:19:57'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1174:13)\n' +
    '    at async InteractionHandler.handleNetworkSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1183:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:281:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 21:19:59'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414238847457562777/aW50ZXJhY3Rpb246MTQxNDIzODg0NzQ1NzU2Mjc3NzpNcmlEYWtNaUtNQWJJYXBxMThycnptSGpFUjkyRmJJMDJkOVpYeVRpclBqVWhtY3NIZXBNYUNzS1I1QXdPSU9KMFFVYzZZcVBPWENwYjNDUjdIcHg1c01YNmZQS3RCS0hHTzR6elJOa01EUHU2cjlBelB2Zjl0WVBKTHAxODRzeA/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 21:19:59'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 3000ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 21:56:56'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 3200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 22:14:00'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 3200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 22:56:54'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 3200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 23:05:00'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '17ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 225,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 5406,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 220,
                  [Symbol(triggerId)]: 215,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 225,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 5406,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 220,
            [Symbol(triggerId)]: 215,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:05:42'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '2ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 252,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 5933,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 249,
                  [Symbol(triggerId)]: 244,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 252,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 5933,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 249,
            [Symbol(triggerId)]: 244,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:05:43'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '1ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 279,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 6940,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 276,
                  [Symbol(triggerId)]: 271,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 279,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 6940,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 276,
            [Symbol(triggerId)]: 271,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:05:44'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 3200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 23:08:14'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1206:13)\n' +
    '    at async InteractionHandler.handleNetworkSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1215:9)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:281:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 23:20:42'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414269304978800711/aW50ZXJhY3Rpb246MTQxNDI2OTMwNDk3ODgwMDcxMTp6bk1BcW1KbmdEWENBcVQzTkxrb2t1emVrdzFXVkFyUXBQOU9KVndncGVCV3d6akRLYWxPNGZXVWhHbWVVSndFTjNhQVlidXlDcnJKSmQ2NG5nNG1RZXBxWkNhc3g2RWQzQXYyeDlLckd2dk1uYXg4MndwbE1FdnBlNTBVYlpqZQ/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 23:20:42'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/fees/estimate',
  method: 'get',
  status: undefined,
  message: 'API request failed: timeout of 3200ms exceeded',
  level: 'error',
  timestamp: '2025-09-07 23:32:40'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.update (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:361:22)\n' +
    '    at async InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1206:13)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:278:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 23:35:41'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414273078141128704/aW50ZXJhY3Rpb246MTQxNDI3MzA3ODE0MTEyODcwNDpoQVlJVlN1aU8yMm1RTFUzRzI3UlJWVVJITzZTaE5wWTQ2czRCQXRIT2F0TGdJa0VtbmdoeTVkMVRpdzBxME52ZGVoZnBYazhRMHNBQnFxS01yVUdRQWV6cDBhVmV4VUNjaFFVd21Ia1A0WHM4dDBQVkc2ejVVelZucldXUjM4cg/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 23:35:41'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '17ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 226,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 4754,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 221,
                  [Symbol(triggerId)]: 216,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 226,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 4754,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 221,
            [Symbol(triggerId)]: 216,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:54:13'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '2ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 253,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 5271,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 250,
                  [Symbol(triggerId)]: 245,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 253,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 5271,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 250,
            [Symbol(triggerId)]: 245,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:54:14'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '2ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 280,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 6278,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 277,
                  [Symbol(triggerId)]: 272,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 280,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 6278,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 277,
            [Symbol(triggerId)]: 272,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:54:15'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '3ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 310,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 8295,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 307,
                  [Symbol(triggerId)]: 302,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 310,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 8295,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 307,
            [Symbol(triggerId)]: 302,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-07 23:54:17'
}
{
  component: 'events',
  service: 'discord-bot',
  error: 'The reply to this interaction has not been sent or deferred.',
  stack: 'Error [InteractionNotReplied]: The reply to this interaction has not been sent or deferred.\n' +
    '    at StringSelectMenuInteraction.editReply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:253:48)\n' +
    '    at InteractionHandler.handleCoinSelect (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:1195:27)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async InteractionHandler.handleSelectMenu (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:278:17)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:111:17)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  interactionType: 3,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'error',
  message: 'Error handling interaction:',
  timestamp: '2025-09-07 23:55:27'
}
{
  component: 'events',
  service: 'discord-bot',
  requestBody: {
    files: [],
    json: {
      type: 4,
      data: {
        content: '❌ An error occurred while processing your request. Please try again later.',
        tts: false,
        nonce: undefined,
        enforce_nonce: false,
        embeds: undefined,
        components: undefined,
        username: undefined,
        avatar_url: undefined,
        allowed_mentions: undefined,
        flags: 64,
        message_reference: undefined,
        attachments: undefined,
        sticker_ids: undefined,
        thread_name: undefined,
        applied_tags: undefined,
        poll: undefined
      }
    }
  },
  rawError: { message: 'Unknown interaction', code: 10062 },
  code: 10062,
  status: 404,
  method: 'POST',
  url: 'https://discord.com/api/v10/interactions/1414278062320648192/aW50ZXJhY3Rpb246MTQxNDI3ODA2MjMyMDY0ODE5MjpRa01XNkV6Zzh2Y01FZVRMSEp3QVVLalZJd0Jya0l3UWNxcjg1amJOcFh0azN0QW9qR05QTU5PcWdpZTNqM0xlY1FrV2Fqa0RxWTJCcEk4am1PV216R3ZBcUF3M0RSa0NtVm1aVXBGR2VuZnpiSGVYVE1KS0o4Wllna3Vvb1oyQw/callback?with_response=false',
  level: 'error',
  message: 'Failed to send error response: Unknown interaction',
  stack: 'DiscordAPIError[10062]: Unknown interaction\n' +
    '    at handleErrors (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\Shared.ts:148:10)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BurstHandler.runRequest (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\handlers\\BurstHandler.ts:144:20)\n' +
    '    at async _REST.request (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\@discordjs\\rest\\src\\lib\\REST.ts:210:20)\n' +
    '    at async StringSelectMenuInteraction.reply (C:\\Users\\pmp\\Desktop\\EC\\node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js:200:22)\n' +
    '    at async InteractionHandler.handleInteraction (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\handlers\\interactionHandler.ts:142:25)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:68:13)',
  timestamp: '2025-09-07 23:55:27'
}
