{
  message: 'Bot is ready! Logged in as Ecbot#8830',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:49'
}
{
  message: 'Bot is in 3 guilds',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:49'
}
{
  service: 'discord-bot',
  appId: '1390575948134350928',
  cfgId: '1390575948134350928',
  invite: 'https://discord.com/api/oauth2/authorize?client_id=1390575948134350928&scope=bot%20applications.commands&permissions=0',
  level: 'info',
  message: 'Discord IDs and Invite URL',
  timestamp: '2025-09-08 00:03:49'
}
{
  message: 'Loaded command: admin',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:49'
}
{
  message: 'Loaded command: link',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:49'
}
{
  message: 'Loaded command: shop',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:49'
}
{
  message: 'Loaded 3 commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:49'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Refreshing guild (/) commands',
  timestamp: '2025-09-08 00:03:49'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Successfully reloaded 3 guild (/) commands',
  timestamp: '2025-09-08 00:03:50'
}
{
  message: 'Refreshing global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:50'
}
{
  message: 'Successfully reloaded 3 global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:50'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '17ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 226,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 4423,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 221,
                  [Symbol(triggerId)]: 216,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 226,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 4423,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 221,
            [Symbol(triggerId)]: 216,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-08 00:03:50'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '2ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 253,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 4944,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 250,
                  [Symbol(triggerId)]: 245,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 253,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 4944,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 250,
            [Symbol(triggerId)]: 245,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-08 00:03:51'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '2ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 280,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 5959,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 277,
                  [Symbol(triggerId)]: 272,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 280,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 5959,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 277,
            [Symbol(triggerId)]: 272,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-08 00:03:52'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '2ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 310,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 7967,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 307,
                  [Symbol(triggerId)]: 302,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 310,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 7967,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 307,
            [Symbol(triggerId)]: 302,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-08 00:03:54'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: false,
  responseTime: '3ms',
  error: AxiosError [AggregateError]
      at Function.AxiosError.from (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\AxiosError.js:92:14)
      at RedirectableRequest.handleRequestError (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\adapters\http.js:620:25)
      at RedirectableRequest.emit (node:events:530:35)
      at RedirectableRequest.emit (node:domain:489:12)
      at ClientRequest.eventHandlers.<computed> (C:\Users\pmp\Desktop\EC\node_modules\follow-redirects\index.js:49:24)
      at ClientRequest.emit (node:events:518:28)
      at ClientRequest.emit (node:domain:489:12)
      at emitErrorEvent (node:_http_client:104:11)
      at Socket.socketErrorListener (node:_http_client:518:5)
      at Socket.emit (node:events:518:28)
      at Axios.request (C:\Users\pmp\Desktop\EC\node_modules\axios\lib\core\Axios.js:45:41)
      at processTicksAndRejections (node:internal/process/task_queues:105:5)
      at async BotApiService.authenticate (C:\Users\pmp\Desktop\EC\packages\bot\src\services\botApiService.ts:119:68)
      at async ECBot.onReady (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:151:13)
      at async Client.<anonymous> (C:\Users\pmp\Desktop\EC\packages\bot\src\index.ts:57:13) {
    code: 'ECONNREFUSED',
    errors: [
      Error: connect ECONNREFUSED ::1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3001
      },
      Error: connect ECONNREFUSED 127.0.0.1:3001
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3001
      }
    ],
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 4000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
        'User-Agent': 'axios/1.11.0',
        'Content-Length': '167',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'post',
      url: 'http://localhost:3001/api/bot-service/auth',
      data: '{"service":"discord_bot","permissions":["read_templates","read_products","read_categories","create_payments","webhook_access","read_bot_config","update_order_status"]}',
      allowAbsoluteUrls: true
    },
    request: <ref *2> Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [
          [Function: handleRequestSocket],
          [Function: destroyOnTimeout]
        ],
        timeout: undefined,
        abort: undefined
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/api/bot-service/auth',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'X-Bot-Token': 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf',
          'User-Agent': 'axios/1.11.0',
          'Content-Length': '167',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '3001',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',        'BIND',        'CHECKOUT',
              'CONNECT',    'COPY',        'DELETE',
              'GET',        'HEAD',        'LINK',
              'LOCK',       'M-SEARCH',    'MERGE',
              'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
              'MOVE',       'NOTIFY',      'OPTIONS',
              'PATCH',      'POST',        'PROPFIND',
              'PROPPATCH',  'PURGE',       'PUT',
              'QUERY',      'REBIND',      'REPORT',
              'SEARCH',     'SOURCE',      'SUBSCRIBE',
              'TRACE',      'UNBIND',      'UNLINK',
              'UNLOCK',     'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: validateHeaderName] {
              withoutStackTrace: [Function (anonymous)]
            },
            validateHeaderValue: [Function: validateHeaderValue] {
              withoutStackTrace: [Function (anonymous)]
            },
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter],
            WebSocket: [Getter],
            CloseEvent: [Getter],
            MessageEvent: [Getter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/bot-service/auth'
      },
      _ended: false,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 167,
      _requestBodyBuffers: [
        {
          data: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
          encoding: undefined
        }
      ],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          response: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: 167,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: true,
        _closed: false,
        _header: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
          'User-Agent: axios/1.11.0\r\n' +
          'Content-Length: 167\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3001\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 80,
          protocol: 'http:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'localhost:3001:': [
              Socket {
                connecting: false,
                _hadError: true,
                _parent: null,
                _host: 'localhost',
                _closeAfterHandlingError: false,
                _events: {
                  close: [
                    [Function: onClose],
                    [Function: socketCloseListener],
                    [Function: bound onceWrapper] {
                      listener: [Function: onClose]
                    }
                  ],
                  error: [Function: socketErrorListener],
                  prefinish: undefined,
                  finish: undefined,
                  drain: [Function: ondrain],
                  data: undefined,
                  end: [Function: onReadableStreamEnd],
                  readable: undefined,
                  connect: [
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function: connect]
                    },
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    }
                  ],
                  free: [Function: onFree],
                  timeout: [
                    [Function: onTimeout],
                    [Function: bound onceWrapper] {
                      listener: [Function: emitRequestTimeout]
                    },
                    [Function (anonymous)]
                  ],
                  agentRemove: [Function: onRemove]
                },
                _readableState: ReadableState {
                  highWaterMark: 16384,
                  buffer: [],
                  bufferIndex: 0,
                  length: 0,
                  pipes: [],
                  awaitDrainWriters: null,
                  [Symbol(kState)]: 59777526,
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                _writableState: WritableState {
                  highWaterMark: 16384,
                  length: 475,
                  corked: 0,
                  onwrite: [Function: bound onwrite],
                  writelen: 475,
                  bufferedIndex: 0,
                  pendingcb: 1,
                  [Symbol(kState)]: 118260214,
                  [Symbol(kBufferedValue)]: null,
                  [Symbol(kWriteCbValue)]: [Function (anonymous)],
                  [Symbol(kErroredValue)]: AggregateError
                      at internalConnectMultiple (node:net:1134:18)
                      at afterConnectMultiple (node:net:1715:7) {
                    code: 'ECONNREFUSED',
                    [errors]: [
                      Error: connect ECONNREFUSED ::1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '::1',
                        port: 3001
                      },
                      Error: connect ECONNREFUSED 127.0.0.1:3001
                          at createConnectionError (node:net:1678:14)
                          at afterConnectMultiple (node:net:1708:16) {
                        errno: -4078,
                        code: 'ECONNREFUSED',
                        syscall: 'connect',
                        address: '127.0.0.1',
                        port: 3001
                      }
                    ]
                  }
                },
                allowHalfOpen: false,
                _maxListeners: undefined,
                _eventsCount: 8,
                _sockname: null,
                _pendingData: [
                  {
                    chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                      'User-Agent: axios/1.11.0\r\n' +
                      'Content-Length: 167\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: localhost:3001\r\n' +
                      'Connection: keep-alive\r\n' +
                      '\r\n',
                    encoding: 'latin1',
                    callback: [Function: nop]
                  },
                  {
                    chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
                    encoding: 'buffer',
                    callback: [Function (anonymous)]
                  },
                  allBuffers: false
                ],
                _pendingEncoding: '',
                server: null,
                _server: null,
                timeout: 4000,
                parser: null,
                _httpMessage: [Circular *1],
                autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
                [Symbol(async_id_symbol)]: 340,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: Timeout {
                  _idleTimeout: -1,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 11984,
                  _onTimeout: null,
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: true,
                  [Symbol(refed)]: false,
                  [Symbol(kHasPrimitive)]: false,
                  [Symbol(asyncId)]: 337,
                  [Symbol(triggerId)]: 332,
                  [Symbol(kAsyncContextFrame)]: undefined
                },
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(shapeMode)]: true,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: true,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/bot-service/auth',
        _ended: false,
        res: null,
        aborted: false,
        timeoutCb: [Function: emitRequestTimeout],
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'localhost',
        protocol: 'http:',
        _redirectable: [Circular *2],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kChunkedBuffer)]: [],
        [Symbol(kChunkedLength)]: 0,
        [Symbol(kSocket)]: Socket {
          connecting: false,
          _hadError: true,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [
              [Function: onClose],
              [Function: socketCloseListener],
              [Function: bound onceWrapper] {
                listener: [Function: onClose]
              }
            ],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: undefined,
            drain: [Function: ondrain],
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: [
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: bound onceWrapper] {
                listener: [Function: connect]
              },
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              }
            ],
            free: [Function: onFree],
            timeout: [
              [Function: onTimeout],
              [Function: bound onceWrapper] {
                listener: [Function: emitRequestTimeout]
              },
              [Function (anonymous)]
            ],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 59777526,
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          _writableState: WritableState {
            highWaterMark: 16384,
            length: 475,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 475,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 118260214,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: [Function (anonymous)],
            [Symbol(kErroredValue)]: AggregateError
                at internalConnectMultiple (node:net:1134:18)
                at afterConnectMultiple (node:net:1715:7) {
              code: 'ECONNREFUSED',
              [errors]: [
                Error: connect ECONNREFUSED ::1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '::1',
                  port: 3001
                },
                Error: connect ECONNREFUSED 127.0.0.1:3001
                    at createConnectionError (node:net:1678:14)
                    at afterConnectMultiple (node:net:1708:16) {
                  errno: -4078,
                  code: 'ECONNREFUSED',
                  syscall: 'connect',
                  address: '127.0.0.1',
                  port: 3001
                }
              ]
            }
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 8,
          _sockname: null,
          _pendingData: [
            {
              chunk: 'POST /api/bot-service/auth HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'X-Bot-Token: YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf\r\n' +
                'User-Agent: axios/1.11.0\r\n' +
                'Content-Length: 167\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3001\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              encoding: 'latin1',
              callback: [Function: nop]
            },
            {
              chunk: <Buffer 7b 22 73 65 72 76 69 63 65 22 3a 22 64 69 73 63 6f 72 64 5f 62 6f 74 22 2c 22 70 65 72 6d 69 73 73 69 6f 6e 73 22 3a 5b 22 72 65 61 64 5f 74 65 6d 70 ... 117 more bytes>,
              encoding: 'buffer',
              callback: [Function (anonymous)]
            },
            allBuffers: false
          ],
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 4000,
          parser: null,
          _httpMessage: [Circular *1],
          autoSelectFamilyAttemptedAddresses: [ '::1:3001', '127.0.0.1:3001' ],
          [Symbol(async_id_symbol)]: 340,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: Timeout {
            _idleTimeout: -1,
            _idlePrev: null,
            _idleNext: null,
            _idleStart: 11984,
            _onTimeout: null,
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: true,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 337,
            [Symbol(triggerId)]: 332,
            [Symbol(kAsyncContextFrame)]: undefined
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [ 'Content-Type', 'application/json' ],
          'x-bot-token': [ 'X-Bot-Token', 'YQAhsUtaPsOi5b7uj4gwb0G1UKmSGKvwdDfH6Ulf' ],
          'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
          'content-length': [ 'Content-Length', '167' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'localhost:3001' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      _currentUrl: 'http://localhost:3001/api/bot-service/auth',
      _timeout: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    cause: AggregateError
        at internalConnectMultiple (node:net:1134:18)
        at afterConnectMultiple (node:net:1715:7) {
      code: 'ECONNREFUSED',
      [errors]: [
        Error: connect ECONNREFUSED ::1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '::1',
          port: 3001
        },
        Error: connect ECONNREFUSED 127.0.0.1:3001
            at createConnectionError (node:net:1678:14)
            at afterConnectMultiple (node:net:1708:16) {
          errno: -4078,
          code: 'ECONNREFUSED',
          syscall: 'connect',
          address: '127.0.0.1',
          port: 3001
        }
      ]
    }
  },
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-08 00:03:58'
}
{
  service: 'discord-bot',
  level: 'error',
  message: 'Failed to authenticate with backend API: Authentication failed after retries: unknown error',
  stack: 'Error: Authentication failed after retries: unknown error\n' +
    '    at BotApiService.authenticate (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\services\\botApiService.ts:161:11)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async ECBot.onReady (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:151:13)\n' +
    '    at async Client.<anonymous> (C:\\Users\\pmp\\Desktop\\EC\\packages\\bot\\src\\index.ts:57:13)',
  timestamp: '2025-09-08 00:03:58'
}
{
  message: 'Bot initialization complete',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:03:58'
}
{
  message: 'Bot is ready! Logged in as Ecbot#8830',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Bot is in 3 guilds',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  service: 'discord-bot',
  appId: '1390575948134350928',
  cfgId: '1390575948134350928',
  invite: 'https://discord.com/api/oauth2/authorize?client_id=1390575948134350928&scope=bot%20applications.commands&permissions=0',
  level: 'info',
  message: 'Discord IDs and Invite URL',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Loaded command: admin',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Loaded command: link',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Loaded command: shop',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Loaded 3 commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Refreshing guild (/) commands',
  timestamp: '2025-09-08 00:04:16'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Successfully reloaded 3 guild (/) commands',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Refreshing global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:16'
}
{
  message: 'Successfully reloaded 3 global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:17'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: true,
  responseTime: '34ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:04:17'
}
{
  component: 'api',
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:17'
}
{
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:17'
}
{
  message: 'Bot initialization complete',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:04:17'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:04:19'
}
{
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:04:19'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:04:19'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'slash_command',
  data: {
    command: 'shop',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:04:19'
}
{
  component: 'commands',
  service: 'discord-bot',
  userId: '417296513270808580',
  username: 'gobo0812',
  guildId: '1413584793542856856',
  guildName: 'Wiko的服务器',
  level: 'info',
  message: 'Executing command: shop',
  timestamp: '2025-09-08 00:04:19'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1911ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:04:21'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '5037ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:04:25'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1510ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:04:26'
}
{
  component: 'commands',
  service: 'discord-bot',
  resolvedLayout: 'vertical',
  rawMode: 'vertical',
  modeStr: 'vertical',
  showProducts: true,
  hasMenuTmpl: true,
  hasGlobalPds: true,
  pdsOwnerId: null,
  pds: { displayMode: 'vertical', showProducts: true },
  level: 'info',
  message: 'Shop browse layout',
  timestamp: '2025-09-08 00:04:26'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop_browse',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  error: undefined,
  level: 'info',
  message: 'Shop command executed',
  timestamp: '2025-09-08 00:04:27'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  level: 'info',
  message: 'Command executed',
  timestamp: '2025-09-08 00:04:27'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:04:30'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:04:30'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:04:30'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:04:30'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:04:41'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:04:41'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:04:41'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:04:45'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1702ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:04:48'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '2175ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:04:48'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:05:54'
}
{
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:05:54'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:05:54'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'slash_command',
  data: {
    command: 'shop',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:05:54'
}
{
  component: 'commands',
  service: 'discord-bot',
  userId: '417296513270808580',
  username: 'gobo0812',
  guildId: '1413584793542856856',
  guildName: 'Wiko的服务器',
  level: 'info',
  message: 'Executing command: shop',
  timestamp: '2025-09-08 00:05:54'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1140ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:05:56'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '3566ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:05:59'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '592ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:05:59'
}
{
  component: 'commands',
  service: 'discord-bot',
  resolvedLayout: 'vertical',
  rawMode: 'vertical',
  modeStr: 'vertical',
  showProducts: true,
  hasMenuTmpl: true,
  hasGlobalPds: true,
  pdsOwnerId: null,
  pds: { displayMode: 'vertical', showProducts: true },
  level: 'info',
  message: 'Shop browse layout',
  timestamp: '2025-09-08 00:05:59'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop_browse',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  error: undefined,
  level: 'info',
  message: 'Shop command executed',
  timestamp: '2025-09-08 00:06:00'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  level: 'info',
  message: 'Command executed',
  timestamp: '2025-09-08 00:06:00'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:06:03'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:06:03'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:06:03'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:06:04'
}
{
  message: 'Bot is ready! Logged in as Ecbot#8830',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Bot is in 3 guilds',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  service: 'discord-bot',
  appId: '1390575948134350928',
  cfgId: '1390575948134350928',
  invite: 'https://discord.com/api/oauth2/authorize?client_id=1390575948134350928&scope=bot%20applications.commands&permissions=0',
  level: 'info',
  message: 'Discord IDs and Invite URL',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Loaded command: admin',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Loaded command: link',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Loaded command: shop',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Loaded 3 commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Refreshing guild (/) commands',
  timestamp: '2025-09-08 00:13:17'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Successfully reloaded 3 guild (/) commands',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Refreshing global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:17'
}
{
  message: 'Successfully reloaded 3 global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:18'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: true,
  responseTime: '35ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:13:18'
}
{
  component: 'api',
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:18'
}
{
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:18'
}
{
  message: 'Bot initialization complete',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:13:18'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:13:30'
}
{
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:13:30'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:13:30'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'slash_command',
  data: {
    command: 'shop',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:13:30'
}
{
  component: 'commands',
  service: 'discord-bot',
  userId: '417296513270808580',
  username: 'gobo0812',
  guildId: '1413584793542856856',
  guildName: 'Wiko的服务器',
  level: 'info',
  message: 'Executing command: shop',
  timestamp: '2025-09-08 00:13:30'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1656ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:13:34'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '2588ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:13:34'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '607ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:13:35'
}
{
  component: 'commands',
  service: 'discord-bot',
  resolvedLayout: 'vertical',
  rawMode: 'vertical',
  modeStr: 'vertical',
  showProducts: true,
  hasMenuTmpl: true,
  hasGlobalPds: true,
  pdsOwnerId: null,
  pds: { displayMode: 'vertical', showProducts: true },
  level: 'info',
  message: 'Shop browse layout',
  timestamp: '2025-09-08 00:13:35'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop_browse',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  error: undefined,
  level: 'info',
  message: 'Shop command executed',
  timestamp: '2025-09-08 00:13:36'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  level: 'info',
  message: 'Command executed',
  timestamp: '2025-09-08 00:13:36'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:13:37'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:13:37'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:13:37'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:13:38'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:13:41'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:13:41'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:13:41'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'product_select',
    selectedValues: [ 'ad5b9fb3-9830-4754-bb31-e94c9e9d09ed' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:13:41'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:13:45'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:13:45'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:13:45'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'payment_select',
    selectedValues: [ 'crypto' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:13:45'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1193ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:13:46'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:13:53'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:13:53'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:13:53'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'coin_select',
    selectedValues: [ 'BTC' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:13:54'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '762ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:13:55'
}
{
  message: 'Received SIGINT, shutting down gracefully...',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:44:19'
}
{
  message: 'Bot is ready! Logged in as Ecbot#8830',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Bot is in 3 guilds',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  service: 'discord-bot',
  appId: '1390575948134350928',
  cfgId: '1390575948134350928',
  invite: 'https://discord.com/api/oauth2/authorize?client_id=1390575948134350928&scope=bot%20applications.commands&permissions=0',
  level: 'info',
  message: 'Discord IDs and Invite URL',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Loaded command: admin',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Loaded command: link',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Loaded command: shop',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Loaded 3 commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Refreshing guild (/) commands',
  timestamp: '2025-09-08 00:45:01'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Successfully reloaded 3 guild (/) commands',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Refreshing global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:01'
}
{
  message: 'Successfully reloaded 3 global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:02'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: true,
  responseTime: '35ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:45:02'
}
{
  component: 'api',
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:02'
}
{
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:02'
}
{
  message: 'Bot initialization complete',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:45:02'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:45:09'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:45:09'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:45:09'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:45:10'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1868ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:45:12'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '2352ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:45:12'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:45:14'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:45:14'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:45:14'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'product_select',
    selectedValues: [ 'ad5b9fb3-9830-4754-bb31-e94c9e9d09ed' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:45:14'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:45:16'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:45:16'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:45:16'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'payment_select',
    selectedValues: [ 'crypto' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:45:16'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '663ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:45:17'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:45:22'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:45:22'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:45:22'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'button_click',
  data: {
    customId: 'confirm_order',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:45:22'
}
{
  component: 'api',
  service: 'discord-bot',
  url: '/api/bot-service/orders',
  method: 'post',
  status: 400,
  message: 'API request failed: Request failed with status code 400',
  level: 'error',
  timestamp: '2025-09-08 00:45:22'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/orders',
  method: 'POST',
  success: false,
  responseTime: '18ms',
  error: 'Request failed with status code 400',
  level: 'error',
  message: 'API call failed',
  timestamp: '2025-09-08 00:45:22'
}
{
  message: 'Received SIGINT, shutting down gracefully...',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:50:19'
}
{
  message: 'Bot is ready! Logged in as Ecbot#8830',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Bot is in 3 guilds',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  service: 'discord-bot',
  appId: '1390575948134350928',
  cfgId: '1390575948134350928',
  invite: 'https://discord.com/api/oauth2/authorize?client_id=1390575948134350928&scope=bot%20applications.commands&permissions=0',
  level: 'info',
  message: 'Discord IDs and Invite URL',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Loaded command: admin',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Loaded command: link',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Loaded command: shop',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Loaded 3 commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Refreshing guild (/) commands',
  timestamp: '2025-09-08 00:51:23'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Successfully reloaded 3 guild (/) commands',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Refreshing global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:23'
}
{
  message: 'Successfully reloaded 3 global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:24'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: true,
  responseTime: '38ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:24'
}
{
  component: 'api',
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:24'
}
{
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:24'
}
{
  message: 'Bot initialization complete',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:51:24'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:51:29'
}
{
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:51:29'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 2,
  isChatInput: true,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:51:29'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'slash_command',
  data: {
    command: 'shop',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:51:29'
}
{
  component: 'commands',
  service: 'discord-bot',
  userId: '417296513270808580',
  username: 'gobo0812',
  guildId: '1413584793542856856',
  guildName: 'Wiko的服务器',
  level: 'info',
  message: 'Executing command: shop',
  timestamp: '2025-09-08 00:51:29'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1586ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:31'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '2082ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:32'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '582ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:32'
}
{
  component: 'commands',
  service: 'discord-bot',
  resolvedLayout: 'vertical',
  rawMode: 'vertical',
  modeStr: 'vertical',
  showProducts: true,
  hasMenuTmpl: true,
  hasGlobalPds: true,
  pdsOwnerId: null,
  pds: { displayMode: 'vertical', showProducts: true },
  level: 'info',
  message: 'Shop browse layout',
  timestamp: '2025-09-08 00:51:32'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop_browse',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  error: undefined,
  level: 'info',
  message: 'Shop command executed',
  timestamp: '2025-09-08 00:51:33'
}
{
  component: 'commands',
  service: 'discord-bot',
  command: 'shop',
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  success: true,
  level: 'info',
  message: 'Command executed',
  timestamp: '2025-09-08 00:51:33'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:51:35'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:51:35'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:51:35'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:51:35'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:51:40'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:51:40'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:51:40'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'product_select',
    selectedValues: [ 'ad5b9fb3-9830-4754-bb31-e94c9e9d09ed' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:51:41'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:51:45'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:51:45'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:51:45'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'payment_select',
    selectedValues: [ 'crypto' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:51:45'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '648ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:45'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:51:50'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:51:50'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:51:50'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'button_click',
  data: {
    customId: 'confirm_order',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:51:50'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/orders',
  method: 'POST',
  success: true,
  responseTime: '3779ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:54'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '565ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:51:55'
}
{
  message: 'Received SIGINT, shutting down gracefully...',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:21'
}
{
  message: 'Bot is ready! Logged in as Ecbot#8830',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:27'
}
{
  message: 'Bot is in 3 guilds',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:27'
}
{
  service: 'discord-bot',
  appId: '1390575948134350928',
  cfgId: '1390575948134350928',
  invite: 'https://discord.com/api/oauth2/authorize?client_id=1390575948134350928&scope=bot%20applications.commands&permissions=0',
  level: 'info',
  message: 'Discord IDs and Invite URL',
  timestamp: '2025-09-08 00:55:27'
}
{
  message: 'Loaded command: admin',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:27'
}
{
  message: 'Loaded command: link',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:27'
}
{
  message: 'Loaded command: shop',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:27'
}
{
  message: 'Loaded 3 commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:27'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Refreshing guild (/) commands',
  timestamp: '2025-09-08 00:55:27'
}
{
  service: 'discord-bot',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Successfully reloaded 3 guild (/) commands',
  timestamp: '2025-09-08 00:55:28'
}
{
  message: 'Refreshing global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:28'
}
{
  message: 'Successfully reloaded 3 global application (/) commands',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:28'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/auth',
  method: 'POST',
  success: true,
  responseTime: '34ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:55:28'
}
{
  component: 'api',
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:28'
}
{
  message: 'Successfully authenticated with backend API',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:28'
}
{
  message: 'Bot initialization complete',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 00:55:28'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:55:40'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:55:40'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:55:40'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'category_select',
    selectedValues: [ 'e40b101a-bb1c-4562-9600-6fb7d6124e2d' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:55:40'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/categories/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1734ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:55:42'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/products/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '1959ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:55:42'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:55:45'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:55:45'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:55:45'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'product_select',
    selectedValues: [ 'ad5b9fb3-9830-4754-bb31-e94c9e9d09ed' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:55:45'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:55:48'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:55:48'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:55:48'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'select_menu',
  data: {
    customId: 'payment_select',
    selectedValues: [ 'crypto' ],
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:55:48'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '701ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:55:49'
}
{
  service: 'discord-bot',
  t: 'INTERACTION_CREATE',
  level: 'info',
  message: 'raw INTERACTION packet',
  timestamp: '2025-09-08 00:55:53'
}
{
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'interactionCreate received',
  timestamp: '2025-09-08 00:55:53'
}
{
  component: 'events',
  service: 'discord-bot',
  type: 3,
  isChatInput: false,
  userId: '417296513270808580',
  guildId: '1413584793542856856',
  level: 'info',
  message: 'Incoming interaction',
  timestamp: '2025-09-08 00:55:53'
}
{
  component: 'events',
  service: 'discord-bot',
  eventType: 'button_click',
  data: {
    customId: 'confirm_order',
    userId: '417296513270808580',
    guildId: '1413584793542856856'
  },
  success: true,
  level: 'info',
  message: 'Event processed',
  timestamp: '2025-09-08 00:55:53'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/orders',
  method: 'POST',
  success: true,
  responseTime: '3172ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:55:57'
}
{
  component: 'api',
  service: 'discord-bot',
  endpoint: '/api/bot-service/templates/1413584793542856856',
  method: 'GET',
  success: true,
  responseTime: '232ms',
  level: 'info',
  message: 'API call completed',
  timestamp: '2025-09-08 00:55:57'
}
{
  message: 'Received SIGINT, shutting down gracefully...',
  level: 'info',
  service: 'discord-bot',
  timestamp: '2025-09-08 01:11:06'
}
