version: '3.8'

services:
  # API Backend
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: ecbot-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - ecbot-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Discord Bot
  bot:
    build:
      context: .
      dockerfile: packages/bot/Dockerfile
    container_name: ecbot-discord-bot
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
    depends_on:
      - backend
      - redis
    networks:
      - ecbot-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ecbot-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ecbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - ecbot-network
    deploy:
      resources:
        limits:
          memory: 30M
          cpus: '0.1'

  # Log aggregator (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ecbot-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/ecbot
    ports:
      - "24224:24224"
    networks:
      - ecbot-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  redis_data:
    driver: local

networks:
  ecbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16